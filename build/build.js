const Promise = require('bluebird')
const fs = require('fs-extra')
const minimatch = require('minimatch')
const recursive = require('recursive-readdir')
const uglify = require('uglify-js')
const htmlminifier = require('html-minifier')
const postcss = require('postcss')
const autoprefixer = require('autoprefixer')
const minimist = require('minimist')
const cssnano = require('cssnano')({
  'preset': ['default', {
    'zindex': false
  }]
})
const ssri = require('ssri')

const optionsConfig = {
  'boolean': ['minify'],
  'string': ['variant']
}

const buildData = JSON.parse(fs.readFileSync('./build/build-data.json', 'utf8'))
const taskOptions = minimist(process.argv.slice(2), optionsConfig)

let variant = taskOptions.variant || 'main'
let variantData = (buildData.variants && buildData.variants[variant]) || buildData.default_variant
let excludeGlobs = Array.isArray(variantData.exclude_globs) && variantData.exclude_globs

const minify = taskOptions.minify || false
const targetDir = 'dist'
const srcDir = 'src'

// ----------------
// subroutines

const log = text => Promise.resolve(console.log(text))

const copyFilter = (file) => {
  if (file.endsWith('.DS_Store')) return false
  if (!excludeGlobs) return true
  for (var i = 0; i < excludeGlobs.length; i++) {
    if (file.startsWith(excludeGlobs[i])) return false
  }
  return true
}

const cleanAndCopy = async () => {
  await fs.remove(targetDir)
  await fs.mkdirp(targetDir)
  await fs.copy(srcDir, targetDir, {
    'filter': copyFilter
  })
}

const processMatch = (files, match, method) => {
  let matchedFiles = files.filter((file) => minimatch(file, match))
  return Promise.map(matchedFiles, method)
}

const mutateFile = (file, method) => fs.readFile(file, 'utf8')
  .then((fileContent) => method(fileContent))
  .then((result) => fs.writeFile(file, result, 'utf8'))

const minifyJs = (file) => mutateFile(file, (fileContent) => {
  let result = fileContent
  result = uglify.minify(result).code
  return result
})

const minifyJson = (file) => mutateFile(file, (fileContent) => {
  try {
    return JSON.stringify(JSON.parse(fileContent))
  } catch (e) {
    return fileContent
  }
})

const addIntegrities = (fileContent) => {
  var parts = fileContent.split('__sri_')
  for (var i = 1; i < parts.length; i++) {
    var subParts = parts[i].split('__')
    parts[i] = ssri.fromData(fs.readFileSync(targetDir + '/' + subParts.shift(), 'utf8'), {
      algorithms: ['sha384']
    }).toString() + subParts.join('__')
  }
  return parts.join('')
}

const buildHtml = (file) => mutateFile(file, function (fileContent) {
  return addIntegrities(fileContent)
})

const minifyHtml = (file) => mutateFile(file, function (fileContent) {
  fileContent = addIntegrities(fileContent)

  return htmlminifier.minify(fileContent, {
    'caseSensitive': true,
    'collapseBooleanAttributes': true,
    'collapseInlineTagWhitespace': true,
    'collapseWhitespace': true,
    'conservativeCollapse': true,
    'decodeEntities': true,
    'html5': true,
    'includeAutoGeneratedTags': true,
    'keepClosingSlash': false,
    'maxLineLength': 0,
    'minifyCSS': true,
    'minifyJS': true,
    'preserveLineBreaks': false,
    'preventAttributesEscaping': false,
    'processConditionalComments': true,
    'quoteCharacter': '"',
    'removeAttributeQuotes': true,
    'removeComments': true,
    'removeEmptyAttributes': true,
    'removeEmptyElements': false,
    'removeOptionalTags': true,
    'removeRedundantAttributes': true,
    'removeScriptTypeAttributes': true,
    'removeStyleLinkTypeAttributes': true,
    'removeTagWhitespace': false,
    'sortAttributes': true,
    'sortClassName': true,
    'useShortDoctype': true
  })
})

const minifyCss = (file) => mutateFile(file, (fileContent) => {
  return postcss([autoprefixer, cssnano]).process(fileContent, { 'from': undefined })
})

const buildCss = (file) => mutateFile(file, (fileContent) => {
  return postcss([autoprefixer]).process(fileContent, { 'from': undefined })
})

const processFiles = () => recursive(targetDir)
  .then((files) => {
    if (!minify) {
      return processMatch(files, '**/*.css', buildCss).then(function () {
        return processMatch(files, '**/*.html', buildHtml)
      })
    }
    return Promise.all([
      processMatch(files, '**/*.css', minifyCss),
      processMatch(files, '**/*.js', minifyJs),
      processMatch(files, '**/*.json', minifyJson)
    ]).then(function () {
      return processMatch(files, '**/*.html', minifyHtml)
    })
  })

// ----------------
// build sequence

const build = () => log('building...')
  .then(() => cleanAndCopy())
  .then(() => processFiles())
  .then(() => log('âœ” built :)'))
  .catch(console.error)

// ----------------
// execution

build()
